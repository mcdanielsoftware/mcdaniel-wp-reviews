import {
  __name
} from "./chunk.KSB52TMW.js";
var __commonJS = (callback, module) => () => {
  if (!module) {
    module = {exports: {}};
    callback(module.exports, module);
  }
  return module.exports;
};

// node_modules/@splidejs/splide/dist/js/splide.esm.js
var require_splide_esm = __commonJS((exports, module) => {
  /*!
   * Splide.js
   * Version  : 2.4.20
   * License  : MIT
   * Copyright: 2020 Naotoshi Fujita
   */
  (/* @__PURE__ */ __name(function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === "object" && typeof module === "object")
      module.exports = factory();
    else if (typeof define === "function" && define.amd)
      define([], factory);
    else if (typeof exports === "object")
      exports["Splide"] = factory();
    else
      root["Splide"] = factory();
  }, "webpackUniversalModuleDefinition"))(self, function() {
    return (() => {
      "use strict";
      var __webpack_modules__ = {
        311: (__unused_webpack_module, __webpack_exports__, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__);
          __webpack_require__2.d(__webpack_exports__, {
            default: () => module_Splide
          });
          var states_namespaceObject = {};
          __webpack_require__2.r(states_namespaceObject);
          __webpack_require__2.d(states_namespaceObject, {
            CREATED: () => CREATED,
            DESTROYED: () => DESTROYED,
            IDLE: () => IDLE,
            MOUNTED: () => MOUNTED,
            MOVING: () => MOVING
          });
          ;
          const core_event = /* @__PURE__ */ __name(function() {
            var data = [];
            var Event = {
              on: /* @__PURE__ */ __name(function on(events, handler, elm, options2) {
                if (elm === void 0) {
                  elm = null;
                }
                if (options2 === void 0) {
                  options2 = {};
                }
                events.split(" ").forEach(function(event) {
                  if (elm) {
                    elm.addEventListener(event, handler, options2);
                  }
                  data.push({
                    event,
                    handler,
                    elm,
                    options: options2
                  });
                });
              }, "on"),
              off: /* @__PURE__ */ __name(function off(events, elm) {
                if (elm === void 0) {
                  elm = null;
                }
                events.split(" ").forEach(function(event) {
                  data = data.filter(function(item) {
                    if (item && item.event === event && item.elm === elm) {
                      unsubscribe(item);
                      return false;
                    }
                    return true;
                  });
                });
              }, "off"),
              emit: /* @__PURE__ */ __name(function emit(event) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                data.forEach(function(item) {
                  if (!item.elm && item.event.split(".")[0] === event) {
                    item.handler.apply(item, args);
                  }
                });
              }, "emit"),
              destroy: /* @__PURE__ */ __name(function destroy() {
                data.forEach(unsubscribe);
                data = [];
              }, "destroy")
            };
            function unsubscribe(item) {
              if (item.elm) {
                item.elm.removeEventListener(item.event, item.handler, item.options);
              }
            }
            __name(unsubscribe, "unsubscribe");
            return Event;
          }, "core_event");
          ;
          const state = /* @__PURE__ */ __name(function(initialState) {
            var curr = initialState;
            return {
              set: /* @__PURE__ */ __name(function set(state2) {
                curr = state2;
              }, "set"),
              is: /* @__PURE__ */ __name(function is(state2) {
                return state2 === curr;
              }, "is")
            };
          }, "state");
          ;
          function _extends() {
            _extends = Object.assign || function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };
            return _extends.apply(this, arguments);
          }
          __name(_extends, "_extends");
          var keys = Object.keys;
          function each(obj, callback) {
            keys(obj).some(function(key, index) {
              return callback(obj[key], key, index);
            });
          }
          __name(each, "each");
          function values(obj) {
            return keys(obj).map(function(key) {
              return obj[key];
            });
          }
          __name(values, "values");
          function isObject(subject) {
            return typeof subject === "object";
          }
          __name(isObject, "isObject");
          function merge(_ref, from) {
            var to = _extends({}, _ref);
            each(from, function(value, key) {
              if (isObject(value)) {
                if (!isObject(to[key])) {
                  to[key] = {};
                }
                to[key] = merge(to[key], value);
              } else {
                to[key] = value;
              }
            });
            return to;
          }
          __name(merge, "merge");
          function object_assign(to, from) {
            keys(from).forEach(function(key) {
              if (!to[key]) {
                Object.defineProperty(to, key, Object.getOwnPropertyDescriptor(from, key));
              }
            });
            return to;
          }
          __name(object_assign, "object_assign");
          ;
          function toArray(value) {
            return Array.isArray(value) ? value : [value];
          }
          __name(toArray, "toArray");
          function between(value, m1, m2) {
            return Math.min(Math.max(value, m1 > m2 ? m2 : m1), m1 > m2 ? m1 : m2);
          }
          __name(between, "between");
          function sprintf(format, replacements) {
            var i = 0;
            return format.replace(/%s/g, function() {
              return toArray(replacements)[i++];
            });
          }
          __name(sprintf, "sprintf");
          function unit(value) {
            var type = typeof value;
            if (type === "number" && value > 0) {
              return parseFloat(value) + "px";
            }
            return type === "string" ? value : "";
          }
          __name(unit, "unit");
          function pad(number) {
            return number < 10 ? "0" + number : number;
          }
          __name(pad, "pad");
          function toPixel(root, value) {
            if (typeof value === "string") {
              var div = create("div", {});
              applyStyle(div, {
                position: "absolute",
                width: value
              });
              append(root, div);
              value = div.clientWidth;
              dom_remove(div);
            }
            return +value || 0;
          }
          __name(toPixel, "toPixel");
          ;
          function find(elm, selector) {
            return elm ? elm.querySelector(selector.split(" ")[0]) : null;
          }
          __name(find, "find");
          function child(parent, tagOrClassName) {
            return children(parent, tagOrClassName)[0];
          }
          __name(child, "child");
          function children(parent, tagOrClassName) {
            if (parent) {
              return values(parent.children).filter(function(child2) {
                return hasClass(child2, tagOrClassName.split(" ")[0]) || child2.tagName === tagOrClassName;
              });
            }
            return [];
          }
          __name(children, "children");
          function create(tag, attrs) {
            var elm = document.createElement(tag);
            each(attrs, function(value, key) {
              return setAttribute(elm, key, value);
            });
            return elm;
          }
          __name(create, "create");
          function domify(html) {
            var div = create("div", {});
            div.innerHTML = html;
            return div.firstChild;
          }
          __name(domify, "domify");
          function dom_remove(elms) {
            toArray(elms).forEach(function(elm) {
              if (elm) {
                var parent = elm.parentElement;
                parent && parent.removeChild(elm);
              }
            });
          }
          __name(dom_remove, "dom_remove");
          function append(parent, child2) {
            if (parent) {
              parent.appendChild(child2);
            }
          }
          __name(append, "append");
          function before(elm, ref) {
            if (elm && ref) {
              var parent = ref.parentElement;
              parent && parent.insertBefore(elm, ref);
            }
          }
          __name(before, "before");
          function applyStyle(elm, styles) {
            if (elm) {
              each(styles, function(value, prop) {
                if (value !== null) {
                  elm.style[prop] = value;
                }
              });
            }
          }
          __name(applyStyle, "applyStyle");
          function addOrRemoveClasses(elm, classes, remove) {
            if (elm) {
              toArray(classes).forEach(function(name) {
                if (name) {
                  elm.classList[remove ? "remove" : "add"](name);
                }
              });
            }
          }
          __name(addOrRemoveClasses, "addOrRemoveClasses");
          function addClass(elm, classes) {
            addOrRemoveClasses(elm, classes, false);
          }
          __name(addClass, "addClass");
          function removeClass(elm, classes) {
            addOrRemoveClasses(elm, classes, true);
          }
          __name(removeClass, "removeClass");
          function hasClass(elm, className) {
            return !!elm && elm.classList.contains(className);
          }
          __name(hasClass, "hasClass");
          function setAttribute(elm, name, value) {
            if (elm) {
              elm.setAttribute(name, value);
            }
          }
          __name(setAttribute, "setAttribute");
          function getAttribute(elm, name) {
            return elm ? elm.getAttribute(name) : "";
          }
          __name(getAttribute, "getAttribute");
          function removeAttribute(elms, names) {
            toArray(names).forEach(function(name) {
              toArray(elms).forEach(function(elm) {
                return elm && elm.removeAttribute(name);
              });
            });
          }
          __name(removeAttribute, "removeAttribute");
          function getRect(elm) {
            return elm.getBoundingClientRect();
          }
          __name(getRect, "getRect");
          function loaded(elm, callback) {
            var images = elm.querySelectorAll("img");
            var length = images.length;
            if (length) {
              var count = 0;
              each(images, function(img) {
                img.onload = img.onerror = function() {
                  if (++count === length) {
                    callback();
                  }
                };
              });
            } else {
              callback();
            }
          }
          __name(loaded, "loaded");
          ;
          var SLIDE = "slide";
          var LOOP = "loop";
          var FADE = "fade";
          ;
          const slide = /* @__PURE__ */ __name(function(Splide2, Components) {
            var list;
            var endCallback;
            return {
              mount: /* @__PURE__ */ __name(function mount() {
                list = Components.Elements.list;
                Splide2.on("transitionend", function(e) {
                  if (e.target === list && endCallback) {
                    endCallback();
                  }
                }, list);
              }, "mount"),
              start: /* @__PURE__ */ __name(function start(destIndex, newIndex, prevIndex, coord, done) {
                var options2 = Splide2.options;
                var edgeIndex = Components.Controller.edgeIndex;
                var speed = options2.speed;
                endCallback = done;
                if (Splide2.is(SLIDE)) {
                  if (prevIndex === 0 && newIndex >= edgeIndex || prevIndex >= edgeIndex && newIndex === 0) {
                    speed = options2.rewindSpeed || speed;
                  }
                }
                applyStyle(list, {
                  transition: "transform " + speed + "ms " + options2.easing,
                  transform: "translate(" + coord.x + "px," + coord.y + "px)"
                });
              }, "start")
            };
          }, "slide");
          ;
          const fade = /* @__PURE__ */ __name(function(Splide2, Components) {
            var Fade = {
              mount: /* @__PURE__ */ __name(function mount() {
                apply(Splide2.index);
              }, "mount"),
              start: /* @__PURE__ */ __name(function start(destIndex, newIndex, prevIndex, coord, done) {
                var track2 = Components.Elements.track;
                applyStyle(track2, {
                  height: unit(track2.clientHeight)
                });
                apply(newIndex);
                setTimeout(function() {
                  done();
                  applyStyle(track2, {
                    height: ""
                  });
                });
              }, "start")
            };
            function apply(index) {
              var options2 = Splide2.options;
              applyStyle(Components.Elements.slides[index], {
                transition: "opacity " + options2.speed + "ms " + options2.easing
              });
            }
            __name(apply, "apply");
            return Fade;
          }, "fade");
          ;
          ;
          function compose(Splide2, Components, Transition) {
            var components = {};
            each(Components, function(Component, name) {
              components[name] = Component(Splide2, components, name.toLowerCase());
            });
            if (!Transition) {
              Transition = Splide2.is(FADE) ? fade : slide;
            }
            components.Transition = Transition(Splide2, components);
            return components;
          }
          __name(compose, "compose");
          ;
          var MESSAGE_PREFIX = "[SPLIDE]";
          function error(message) {
            console.error(MESSAGE_PREFIX + " " + message);
          }
          __name(error, "error");
          function exist(subject, message) {
            if (!subject) {
              throw new Error(message);
            }
          }
          __name(exist, "exist");
          ;
          var ROOT = "splide";
          var ELEMENT_CLASSES = {
            root: ROOT,
            slider: ROOT + "__slider",
            track: ROOT + "__track",
            list: ROOT + "__list",
            slide: ROOT + "__slide",
            container: ROOT + "__slide__container",
            arrows: ROOT + "__arrows",
            arrow: ROOT + "__arrow",
            prev: ROOT + "__arrow--prev",
            next: ROOT + "__arrow--next",
            pagination: ROOT + "__pagination",
            page: ROOT + "__pagination__page",
            clone: ROOT + "__slide--clone",
            progress: ROOT + "__progress",
            bar: ROOT + "__progress__bar",
            autoplay: ROOT + "__autoplay",
            play: ROOT + "__play",
            pause: ROOT + "__pause",
            spinner: ROOT + "__spinner",
            sr: ROOT + "__sr"
          };
          var STATUS_CLASSES = {
            active: "is-active",
            visible: "is-visible",
            loading: "is-loading"
          };
          ;
          var I18N = {
            prev: "Previous slide",
            next: "Next slide",
            first: "Go to first slide",
            last: "Go to last slide",
            slideX: "Go to slide %s",
            pageX: "Go to page %s",
            play: "Start autoplay",
            pause: "Pause autoplay"
          };
          ;
          var DEFAULTS = {
            type: "slide",
            rewind: false,
            speed: 400,
            rewindSpeed: 0,
            waitForTransition: true,
            width: 0,
            height: 0,
            fixedWidth: 0,
            fixedHeight: 0,
            heightRatio: 0,
            autoWidth: false,
            autoHeight: false,
            perPage: 1,
            perMove: 0,
            clones: 0,
            start: 0,
            focus: false,
            gap: 0,
            padding: 0,
            arrows: true,
            arrowPath: "",
            pagination: true,
            autoplay: false,
            interval: 5e3,
            pauseOnHover: true,
            pauseOnFocus: true,
            resetProgress: true,
            lazyLoad: false,
            preloadPages: 1,
            easing: "cubic-bezier(.42,.65,.27,.99)",
            keyboard: "global",
            drag: true,
            dragAngleThreshold: 30,
            swipeDistanceThreshold: 150,
            flickVelocityThreshold: 0.6,
            flickPower: 600,
            flickMaxPages: 1,
            direction: "ltr",
            cover: false,
            accessibility: true,
            slideFocus: true,
            isNavigation: false,
            trimSpace: true,
            updateOnMove: false,
            throttle: 100,
            destroy: false,
            breakpoints: false,
            classes: ELEMENT_CLASSES,
            i18n: I18N
          };
          ;
          var CREATED = 1;
          var MOUNTED = 2;
          var IDLE = 3;
          var MOVING = 4;
          var DESTROYED = 5;
          ;
          function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          __name(_defineProperties, "_defineProperties");
          function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps)
              _defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              _defineProperties(Constructor, staticProps);
            return Constructor;
          }
          __name(_createClass, "_createClass");
          var Splide = function() {
            function Splide2(root, options2, Components) {
              if (options2 === void 0) {
                options2 = {};
              }
              if (Components === void 0) {
                Components = {};
              }
              this.root = root instanceof Element ? root : document.querySelector(root);
              exist(this.root, "An invalid element/selector was given.");
              this.Components = null;
              this.Event = core_event();
              this.State = state(CREATED);
              this.STATES = states_namespaceObject;
              this._o = merge(DEFAULTS, options2);
              this._i = 0;
              this._c = Components;
              this._e = {};
              this._t = null;
            }
            __name(Splide2, "Splide");
            var _proto = Splide2.prototype;
            _proto.mount = /* @__PURE__ */ __name(function mount(Extensions, Transition) {
              var _this = this;
              if (Extensions === void 0) {
                Extensions = this._e;
              }
              if (Transition === void 0) {
                Transition = this._t;
              }
              this.State.set(CREATED);
              this._e = Extensions;
              this._t = Transition;
              this.Components = compose(this, merge(this._c, Extensions), Transition);
              try {
                each(this.Components, function(component, key) {
                  var required = component.required;
                  if (required === void 0 || required) {
                    component.mount && component.mount();
                  } else {
                    delete _this.Components[key];
                  }
                });
              } catch (e) {
                error(e.message);
                return;
              }
              var State = this.State;
              State.set(MOUNTED);
              each(this.Components, function(component) {
                component.mounted && component.mounted();
              });
              this.emit("mounted");
              State.set(IDLE);
              this.emit("ready");
              applyStyle(this.root, {
                visibility: "visible"
              });
              this.on("move drag", function() {
                return State.set(MOVING);
              }).on("moved dragged", function() {
                return State.set(IDLE);
              });
              return this;
            }, "mount");
            _proto.sync = /* @__PURE__ */ __name(function sync2(splide) {
              this.sibling = splide;
              return this;
            }, "sync");
            _proto.on = /* @__PURE__ */ __name(function on(events, handler, elm, options2) {
              if (elm === void 0) {
                elm = null;
              }
              if (options2 === void 0) {
                options2 = {};
              }
              this.Event.on(events, handler, elm, options2);
              return this;
            }, "on");
            _proto.off = /* @__PURE__ */ __name(function off(events, elm) {
              if (elm === void 0) {
                elm = null;
              }
              this.Event.off(events, elm);
              return this;
            }, "off");
            _proto.emit = /* @__PURE__ */ __name(function emit(event) {
              var _this$Event;
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              (_this$Event = this.Event).emit.apply(_this$Event, [event].concat(args));
              return this;
            }, "emit");
            _proto.go = /* @__PURE__ */ __name(function go(control, wait) {
              if (wait === void 0) {
                wait = this.options.waitForTransition;
              }
              if (this.State.is(IDLE) || this.State.is(MOVING) && !wait) {
                this.Components.Controller.go(control, false);
              }
              return this;
            }, "go");
            _proto.is = /* @__PURE__ */ __name(function is(type) {
              return type === this._o.type;
            }, "is");
            _proto.add = /* @__PURE__ */ __name(function add(slide2, index) {
              if (index === void 0) {
                index = -1;
              }
              this.Components.Elements.add(slide2, index, this.refresh.bind(this));
              return this;
            }, "add");
            _proto.remove = /* @__PURE__ */ __name(function remove(index) {
              this.Components.Elements.remove(index);
              this.refresh();
              return this;
            }, "remove");
            _proto.refresh = /* @__PURE__ */ __name(function refresh() {
              this.emit("refresh:before").emit("refresh").emit("resize");
              return this;
            }, "refresh");
            _proto.destroy = /* @__PURE__ */ __name(function destroy(completely) {
              var _this2 = this;
              if (completely === void 0) {
                completely = true;
              }
              if (this.State.is(CREATED)) {
                this.on("ready", function() {
                  return _this2.destroy(completely);
                });
                return;
              }
              values(this.Components).reverse().forEach(function(component) {
                component.destroy && component.destroy(completely);
              });
              this.emit("destroy", completely);
              this.Event.destroy();
              this.State.set(DESTROYED);
              return this;
            }, "destroy");
            _createClass(Splide2, [{
              key: "index",
              get: /* @__PURE__ */ __name(function get() {
                return this._i;
              }, "get"),
              set: /* @__PURE__ */ __name(function set(index) {
                this._i = parseInt(index);
              }, "set")
            }, {
              key: "length",
              get: /* @__PURE__ */ __name(function get() {
                return this.Components.Elements.length;
              }, "get")
            }, {
              key: "options",
              get: /* @__PURE__ */ __name(function get() {
                return this._o;
              }, "get"),
              set: /* @__PURE__ */ __name(function set(options2) {
                var created = this.State.is(CREATED);
                if (!created) {
                  this.emit("update");
                }
                this._o = merge(this._o, options2);
                if (!created) {
                  this.emit("updated", this._o);
                }
              }, "set")
            }, {
              key: "classes",
              get: /* @__PURE__ */ __name(function get() {
                return this._o.classes;
              }, "get")
            }, {
              key: "i18n",
              get: /* @__PURE__ */ __name(function get() {
                return this._o.i18n;
              }, "get")
            }]);
            return Splide2;
          }();
          ;
          const options = /* @__PURE__ */ __name(function(Splide2) {
            var options2 = getAttribute(Splide2.root, "data-splide");
            if (options2) {
              try {
                Splide2.options = JSON.parse(options2);
              } catch (e) {
                error(e.message);
              }
            }
            return {
              mount: /* @__PURE__ */ __name(function mount() {
                if (Splide2.State.is(CREATED)) {
                  Splide2.index = Splide2.options.start;
                }
              }, "mount")
            };
          }, "options");
          ;
          var LTR = "ltr";
          var RTL = "rtl";
          var TTB = "ttb";
          ;
          var STYLE_RESTORE_EVENTS = "update.slide";
          const elements_slide = /* @__PURE__ */ __name(function(Splide2, index, realIndex, slide2) {
            var updateOnMove = Splide2.options.updateOnMove;
            var STATUS_UPDATE_EVENTS = "ready.slide updated.slide resized.slide moved.slide" + (updateOnMove ? " move.slide" : "");
            var Slide = {
              slide: slide2,
              index,
              realIndex,
              container: child(slide2, Splide2.classes.container),
              isClone: realIndex > -1,
              mount: /* @__PURE__ */ __name(function mount() {
                var _this = this;
                if (!this.isClone) {
                  slide2.id = Splide2.root.id + "-slide" + pad(index + 1);
                }
                Splide2.on(STATUS_UPDATE_EVENTS, function() {
                  return _this.update();
                }).on(STYLE_RESTORE_EVENTS, restoreStyles).on("click", function() {
                  return Splide2.emit("click", _this);
                }, slide2);
                if (updateOnMove) {
                  Splide2.on("move.slide", function(newIndex) {
                    if (newIndex === realIndex) {
                      _update(true, false);
                    }
                  });
                }
                applyStyle(slide2, {
                  display: ""
                });
                this.styles = getAttribute(slide2, "style") || "";
              }, "mount"),
              destroy: /* @__PURE__ */ __name(function destroy() {
                Splide2.off(STATUS_UPDATE_EVENTS).off(STYLE_RESTORE_EVENTS).off("click", slide2);
                removeClass(slide2, values(STATUS_CLASSES));
                restoreStyles();
                removeAttribute(this.container, "style");
              }, "destroy"),
              update: /* @__PURE__ */ __name(function update() {
                _update(this.isActive(), false);
                _update(this.isVisible(), true);
              }, "update"),
              isActive: /* @__PURE__ */ __name(function isActive() {
                return Splide2.index === index;
              }, "isActive"),
              isVisible: /* @__PURE__ */ __name(function isVisible() {
                var active = this.isActive();
                if (Splide2.is(FADE) || active) {
                  return active;
                }
                var ceil = Math.ceil;
                var trackRect = getRect(Splide2.Components.Elements.track);
                var slideRect = getRect(slide2);
                if (Splide2.options.direction === TTB) {
                  return trackRect.top <= slideRect.top && slideRect.bottom <= ceil(trackRect.bottom);
                }
                return trackRect.left <= slideRect.left && slideRect.right <= ceil(trackRect.right);
              }, "isVisible"),
              isWithin: /* @__PURE__ */ __name(function isWithin(from, within) {
                var diff = Math.abs(from - index);
                if (!Splide2.is(SLIDE) && !this.isClone) {
                  diff = Math.min(diff, Splide2.length - diff);
                }
                return diff < within;
              }, "isWithin")
            };
            function _update(active, forVisibility) {
              var type = forVisibility ? "visible" : "active";
              var className = STATUS_CLASSES[type];
              if (active) {
                addClass(slide2, className);
                Splide2.emit("" + type, Slide);
              } else {
                if (hasClass(slide2, className)) {
                  removeClass(slide2, className);
                  Splide2.emit("" + (forVisibility ? "hidden" : "inactive"), Slide);
                }
              }
            }
            __name(_update, "_update");
            function restoreStyles() {
              setAttribute(slide2, "style", Slide.styles);
            }
            __name(restoreStyles, "restoreStyles");
            return Slide;
          }, "elements_slide");
          ;
          var UID_NAME = "uid";
          const components_elements = /* @__PURE__ */ __name(function(Splide2, Components) {
            var root = Splide2.root;
            var classes = Splide2.classes;
            var Slides = [];
            if (!root.id) {
              window.splide = window.splide || {};
              var uid = window.splide[UID_NAME] || 0;
              window.splide[UID_NAME] = ++uid;
              root.id = "splide" + pad(uid);
            }
            var Elements = {
              mount: /* @__PURE__ */ __name(function mount() {
                var _this = this;
                this.init();
                Splide2.on("refresh", function() {
                  _this.destroy();
                  _this.init();
                }).on("updated", function() {
                  removeClass(root, getClasses());
                  addClass(root, getClasses());
                });
              }, "mount"),
              destroy: /* @__PURE__ */ __name(function destroy() {
                Slides.forEach(function(Slide) {
                  Slide.destroy();
                });
                Slides = [];
                removeClass(root, getClasses());
              }, "destroy"),
              init: /* @__PURE__ */ __name(function init() {
                var _this2 = this;
                collect();
                addClass(root, getClasses());
                this.slides.forEach(function(slide2, index) {
                  _this2.register(slide2, index, -1);
                });
              }, "init"),
              register: /* @__PURE__ */ __name(function register(slide2, index, realIndex) {
                var SlideObject = elements_slide(Splide2, index, realIndex, slide2);
                SlideObject.mount();
                Slides.push(SlideObject);
              }, "register"),
              getSlide: /* @__PURE__ */ __name(function getSlide(index) {
                return Slides.filter(function(Slide) {
                  return Slide.index === index;
                })[0];
              }, "getSlide"),
              getSlides: /* @__PURE__ */ __name(function getSlides(includeClones) {
                return includeClones ? Slides : Slides.filter(function(Slide) {
                  return !Slide.isClone;
                });
              }, "getSlides"),
              getSlidesByPage: /* @__PURE__ */ __name(function getSlidesByPage(page) {
                var idx = Components.Controller.toIndex(page);
                var options2 = Splide2.options;
                var max = options2.focus !== false ? 1 : options2.perPage;
                return Slides.filter(function(_ref) {
                  var index = _ref.index;
                  return idx <= index && index < idx + max;
                });
              }, "getSlidesByPage"),
              add: /* @__PURE__ */ __name(function add(slide2, index, callback) {
                if (typeof slide2 === "string") {
                  slide2 = domify(slide2);
                }
                if (slide2 instanceof Element) {
                  var ref = this.slides[index];
                  applyStyle(slide2, {
                    display: "none"
                  });
                  if (ref) {
                    before(slide2, ref);
                    this.slides.splice(index, 0, slide2);
                  } else {
                    append(this.list, slide2);
                    this.slides.push(slide2);
                  }
                  loaded(slide2, function() {
                    callback && callback(slide2);
                  });
                }
              }, "add"),
              remove: /* @__PURE__ */ __name(function remove(index) {
                dom_remove(this.slides.splice(index, 1)[0]);
              }, "remove"),
              each: /* @__PURE__ */ __name(function each2(callback) {
                Slides.forEach(callback);
              }, "each"),
              get length() {
                return this.slides.length;
              },
              get total() {
                return Slides.length;
              }
            };
            function collect() {
              Elements.slider = child(root, classes.slider);
              Elements.track = find(root, "." + classes.track);
              Elements.list = child(Elements.track, classes.list);
              exist(Elements.track && Elements.list, "Track or list was not found.");
              Elements.slides = children(Elements.list, classes.slide);
              var arrows2 = findParts(classes.arrows);
              Elements.arrows = {
                prev: find(arrows2, "." + classes.prev),
                next: find(arrows2, "." + classes.next)
              };
              var autoplay2 = findParts(classes.autoplay);
              Elements.bar = find(findParts(classes.progress), "." + classes.bar);
              Elements.play = find(autoplay2, "." + classes.play);
              Elements.pause = find(autoplay2, "." + classes.pause);
              Elements.track.id = Elements.track.id || root.id + "-track";
              Elements.list.id = Elements.list.id || root.id + "-list";
            }
            __name(collect, "collect");
            function getClasses() {
              var rootClass = classes.root;
              var options2 = Splide2.options;
              return [rootClass + "--" + options2.type, rootClass + "--" + options2.direction, options2.drag ? rootClass + "--draggable" : "", options2.isNavigation ? rootClass + "--nav" : "", STATUS_CLASSES.active];
            }
            __name(getClasses, "getClasses");
            function findParts(className) {
              return child(root, className) || child(Elements.slider, className);
            }
            __name(findParts, "findParts");
            return Elements;
          }, "components_elements");
          ;
          var floor = Math.floor;
          const controller = /* @__PURE__ */ __name(function(Splide2, Components) {
            var options2;
            var isLoop;
            var Controller = {
              mount: /* @__PURE__ */ __name(function mount() {
                options2 = Splide2.options;
                isLoop = Splide2.is(LOOP);
                bind();
              }, "mount"),
              go: /* @__PURE__ */ __name(function go(control, silently) {
                var destIndex = this.trim(this.parse(control));
                Components.Track.go(destIndex, this.rewind(destIndex), silently);
              }, "go"),
              parse: /* @__PURE__ */ __name(function parse(control) {
                var index = Splide2.index;
                var matches = String(control).match(/([+\-<>]+)(\d+)?/);
                var indicator = matches ? matches[1] : "";
                var number = matches ? parseInt(matches[2]) : 0;
                switch (indicator) {
                  case "+":
                    index += number || 1;
                    break;
                  case "-":
                    index -= number || 1;
                    break;
                  case ">":
                  case "<":
                    index = parsePage(number, index, indicator === "<");
                    break;
                  default:
                    index = parseInt(control);
                }
                return index;
              }, "parse"),
              toIndex: /* @__PURE__ */ __name(function toIndex(page) {
                if (hasFocus()) {
                  return page;
                }
                var length = Splide2.length;
                var perPage = options2.perPage;
                var index = page * perPage;
                index = index - (this.pageLength * perPage - length) * floor(index / length);
                if (length - perPage <= index && index < length) {
                  index = length - perPage;
                }
                return index;
              }, "toIndex"),
              toPage: /* @__PURE__ */ __name(function toPage(index) {
                if (hasFocus()) {
                  return index;
                }
                var length = Splide2.length;
                var perPage = options2.perPage;
                if (length - perPage <= index && index < length) {
                  return floor((length - 1) / perPage);
                }
                return floor(index / perPage);
              }, "toPage"),
              trim: /* @__PURE__ */ __name(function trim(index) {
                if (!isLoop) {
                  index = options2.rewind ? this.rewind(index) : between(index, 0, this.edgeIndex);
                }
                return index;
              }, "trim"),
              rewind: /* @__PURE__ */ __name(function rewind(index) {
                var edge = this.edgeIndex;
                if (isLoop) {
                  while (index > edge) {
                    index -= edge + 1;
                  }
                  while (index < 0) {
                    index += edge + 1;
                  }
                } else {
                  if (index > edge) {
                    index = 0;
                  } else if (index < 0) {
                    index = edge;
                  }
                }
                return index;
              }, "rewind"),
              isRtl: /* @__PURE__ */ __name(function isRtl() {
                return options2.direction === RTL;
              }, "isRtl"),
              get pageLength() {
                var length = Splide2.length;
                return hasFocus() ? length : Math.ceil(length / options2.perPage);
              },
              get edgeIndex() {
                var length = Splide2.length;
                if (!length) {
                  return 0;
                }
                if (hasFocus() || options2.isNavigation || isLoop) {
                  return length - 1;
                }
                return length - options2.perPage;
              },
              get prevIndex() {
                var prev = Splide2.index - 1;
                if (isLoop || options2.rewind) {
                  prev = this.rewind(prev);
                }
                return prev > -1 ? prev : -1;
              },
              get nextIndex() {
                var next = Splide2.index + 1;
                if (isLoop || options2.rewind) {
                  next = this.rewind(next);
                }
                return Splide2.index < next && next <= this.edgeIndex || next === 0 ? next : -1;
              }
            };
            function bind() {
              Splide2.on("move", function(newIndex) {
                Splide2.index = newIndex;
              }).on("updated refresh", function(newOptions) {
                options2 = newOptions || options2;
                Splide2.index = between(Splide2.index, 0, Controller.edgeIndex);
              });
            }
            __name(bind, "bind");
            function hasFocus() {
              return options2.focus !== false;
            }
            __name(hasFocus, "hasFocus");
            function parsePage(number, index, prev) {
              if (number > -1) {
                return Controller.toIndex(number);
              }
              var perMove = options2.perMove;
              var sign = prev ? -1 : 1;
              if (perMove) {
                return index + perMove * sign;
              }
              return Controller.toIndex(Controller.toPage(index) + sign);
            }
            __name(parsePage, "parsePage");
            return Controller;
          }, "controller");
          ;
          var abs = Math.abs;
          const track = /* @__PURE__ */ __name(function(Splide2, Components) {
            var Layout;
            var Elements;
            var list;
            var isVertical = Splide2.options.direction === TTB;
            var isFade = Splide2.is(FADE);
            var isRTL = Splide2.options.direction === RTL;
            var isLoopPending = false;
            var sign = isRTL ? 1 : -1;
            var Track = {
              sign,
              mount: /* @__PURE__ */ __name(function mount() {
                Elements = Components.Elements;
                Layout = Components.Layout;
                list = Elements.list;
              }, "mount"),
              mounted: /* @__PURE__ */ __name(function mounted() {
                var _this = this;
                if (!isFade) {
                  this.jump(0);
                  Splide2.on("mounted resize updated", function() {
                    _this.jump(Splide2.index);
                  });
                }
              }, "mounted"),
              go: /* @__PURE__ */ __name(function go(destIndex, newIndex, silently) {
                var newPosition = getTrimmedPosition(destIndex);
                var prevIndex = Splide2.index;
                if (Splide2.State.is(MOVING) && isLoopPending) {
                  return;
                }
                isLoopPending = destIndex !== newIndex;
                if (!silently) {
                  Splide2.emit("move", newIndex, prevIndex, destIndex);
                }
                if (Math.abs(newPosition - this.position) >= 1 || isFade) {
                  Components.Transition.start(destIndex, newIndex, prevIndex, this.toCoord(newPosition), function() {
                    onTransitionEnd(destIndex, newIndex, prevIndex, silently);
                  });
                } else {
                  if (destIndex !== prevIndex && Splide2.options.trimSpace === "move") {
                    Components.Controller.go(destIndex + destIndex - prevIndex, silently);
                  } else {
                    onTransitionEnd(destIndex, newIndex, prevIndex, silently);
                  }
                }
              }, "go"),
              jump: /* @__PURE__ */ __name(function jump(index) {
                this.translate(getTrimmedPosition(index));
              }, "jump"),
              translate: /* @__PURE__ */ __name(function translate(position) {
                applyStyle(list, {
                  transform: "translate" + (isVertical ? "Y" : "X") + "(" + position + "px)"
                });
              }, "translate"),
              cancel: /* @__PURE__ */ __name(function cancel() {
                if (Splide2.is(LOOP)) {
                  this.shift();
                } else {
                  this.translate(this.position);
                }
                applyStyle(list, {
                  transition: ""
                });
              }, "cancel"),
              shift: /* @__PURE__ */ __name(function shift() {
                var position = abs(this.position);
                var left = abs(this.toPosition(0));
                var right = abs(this.toPosition(Splide2.length));
                var innerSize = right - left;
                if (position < left) {
                  position += innerSize;
                } else if (position > right) {
                  position -= innerSize;
                }
                this.translate(sign * position);
              }, "shift"),
              trim: /* @__PURE__ */ __name(function trim(position) {
                if (!Splide2.options.trimSpace || Splide2.is(LOOP)) {
                  return position;
                }
                var edge = sign * (Layout.totalSize() - Layout.size - Layout.gap);
                return between(position, edge, 0);
              }, "trim"),
              toIndex: /* @__PURE__ */ __name(function toIndex(position) {
                var _this2 = this;
                var index = 0;
                var minDistance = Infinity;
                Elements.getSlides(true).forEach(function(Slide) {
                  var slideIndex = Slide.index;
                  var distance = abs(_this2.toPosition(slideIndex) - position);
                  if (distance < minDistance) {
                    minDistance = distance;
                    index = slideIndex;
                  }
                });
                return index;
              }, "toIndex"),
              toCoord: /* @__PURE__ */ __name(function toCoord(position) {
                return {
                  x: isVertical ? 0 : position,
                  y: isVertical ? position : 0
                };
              }, "toCoord"),
              toPosition: /* @__PURE__ */ __name(function toPosition(index) {
                var position = Layout.totalSize(index) - Layout.slideSize(index) - Layout.gap;
                return sign * (position + this.offset(index));
              }, "toPosition"),
              offset: /* @__PURE__ */ __name(function offset(index) {
                var focus = Splide2.options.focus;
                var slideSize = Layout.slideSize(index);
                if (focus === "center") {
                  return -(Layout.size - slideSize) / 2;
                }
                return -(parseInt(focus) || 0) * (slideSize + Layout.gap);
              }, "offset"),
              get position() {
                var prop = isVertical ? "top" : isRTL ? "right" : "left";
                return getRect(list)[prop] - (getRect(Elements.track)[prop] - Layout.padding[prop] * sign);
              }
            };
            function onTransitionEnd(destIndex, newIndex, prevIndex, silently) {
              applyStyle(list, {
                transition: ""
              });
              isLoopPending = false;
              if (!isFade) {
                Track.jump(newIndex);
              }
              if (!silently) {
                Splide2.emit("moved", newIndex, prevIndex, destIndex);
              }
            }
            __name(onTransitionEnd, "onTransitionEnd");
            function getTrimmedPosition(index) {
              return Track.trim(Track.toPosition(index));
            }
            __name(getTrimmedPosition, "getTrimmedPosition");
            return Track;
          }, "track");
          ;
          const clones = /* @__PURE__ */ __name(function(Splide2, Components) {
            var clones2 = [];
            var cloneCount = 0;
            var Elements = Components.Elements;
            var Clones = {
              mount: /* @__PURE__ */ __name(function mount() {
                var _this = this;
                if (Splide2.is(LOOP)) {
                  init();
                  Splide2.on("refresh:before", function() {
                    _this.destroy();
                  }).on("refresh", init).on("resize", function() {
                    if (cloneCount !== getCloneCount()) {
                      _this.destroy();
                      Splide2.refresh();
                    }
                  });
                }
              }, "mount"),
              destroy: /* @__PURE__ */ __name(function destroy() {
                dom_remove(clones2);
                clones2 = [];
              }, "destroy"),
              get clones() {
                return clones2;
              },
              get length() {
                return clones2.length;
              }
            };
            function init() {
              Clones.destroy();
              cloneCount = getCloneCount();
              generateClones(cloneCount);
            }
            __name(init, "init");
            function generateClones(count) {
              var length = Elements.length, register = Elements.register;
              if (length) {
                var slides = Elements.slides;
                while (slides.length < count) {
                  slides = slides.concat(slides);
                }
                slides.slice(0, count).forEach(function(elm, index) {
                  var clone = cloneDeeply(elm);
                  append(Elements.list, clone);
                  clones2.push(clone);
                  register(clone, index + length, index % length);
                });
                slides.slice(-count).forEach(function(elm, index) {
                  var clone = cloneDeeply(elm);
                  before(clone, slides[0]);
                  clones2.push(clone);
                  register(clone, index - count, (length + index - count % length) % length);
                });
              }
            }
            __name(generateClones, "generateClones");
            function getCloneCount() {
              var options2 = Splide2.options;
              if (options2.clones) {
                return options2.clones;
              }
              var baseCount = options2.autoWidth || options2.autoHeight ? Elements.length : options2.perPage;
              var dimension = options2.direction === TTB ? "Height" : "Width";
              var fixedSize = toPixel(Splide2.root, options2["fixed" + dimension]);
              if (fixedSize) {
                baseCount = Math.ceil(Elements.track["client" + dimension] / fixedSize);
              }
              return baseCount * (options2.drag ? options2.flickMaxPages + 1 : 1);
            }
            __name(getCloneCount, "getCloneCount");
            function cloneDeeply(elm) {
              var clone = elm.cloneNode(true);
              addClass(clone, Splide2.classes.clone);
              removeAttribute(clone, "id");
              return clone;
            }
            __name(cloneDeeply, "cloneDeeply");
            return Clones;
          }, "clones");
          ;
          const horizontal = /* @__PURE__ */ __name(function(Splide2, Components) {
            var Elements = Components.Elements;
            var root = Splide2.root;
            var track2;
            var options2 = Splide2.options;
            return {
              margin: "margin" + (options2.direction === RTL ? "Left" : "Right"),
              height: 0,
              init: /* @__PURE__ */ __name(function init() {
                this.resize();
              }, "init"),
              resize: /* @__PURE__ */ __name(function resize() {
                options2 = Splide2.options;
                track2 = Elements.track;
                this.gap = toPixel(root, options2.gap);
                var padding = options2.padding;
                var left = toPixel(root, padding.left || padding);
                var right = toPixel(root, padding.right || padding);
                this.padding = {
                  left,
                  right
                };
                applyStyle(track2, {
                  paddingLeft: unit(left),
                  paddingRight: unit(right)
                });
              }, "resize"),
              totalWidth: /* @__PURE__ */ __name(function totalWidth(index) {
                if (index === void 0) {
                  index = Splide2.length - 1;
                }
                var Slide = Elements.getSlide(index);
                var width = 0;
                if (Slide) {
                  var slideRect = getRect(Slide.slide);
                  var listRect = getRect(Elements.list);
                  if (options2.direction === RTL) {
                    width = listRect.right - slideRect.left;
                  } else {
                    width = slideRect.right - listRect.left;
                  }
                  width += this.gap;
                }
                return width;
              }, "totalWidth"),
              slideWidth: /* @__PURE__ */ __name(function slideWidth(index) {
                if (options2.autoWidth) {
                  var Slide = Elements.getSlide(index);
                  return Slide ? Slide.slide.offsetWidth : 0;
                }
                var width = options2.fixedWidth || (this.width + this.gap) / options2.perPage - this.gap;
                return toPixel(root, width);
              }, "slideWidth"),
              slideHeight: /* @__PURE__ */ __name(function slideHeight() {
                var height = options2.height || options2.fixedHeight || this.width * options2.heightRatio;
                return toPixel(root, height);
              }, "slideHeight"),
              get width() {
                return track2.clientWidth - this.padding.left - this.padding.right;
              }
            };
          }, "horizontal");
          ;
          const vertical = /* @__PURE__ */ __name(function(Splide2, Components) {
            var Elements = Components.Elements;
            var root = Splide2.root;
            var track2;
            var options2;
            return {
              margin: "marginBottom",
              init: /* @__PURE__ */ __name(function init() {
                this.resize();
              }, "init"),
              resize: /* @__PURE__ */ __name(function resize() {
                options2 = Splide2.options;
                track2 = Elements.track;
                this.gap = toPixel(root, options2.gap);
                var padding = options2.padding;
                var top = toPixel(root, padding.top || padding);
                var bottom = toPixel(root, padding.bottom || padding);
                this.padding = {
                  top,
                  bottom
                };
                applyStyle(track2, {
                  paddingTop: unit(top),
                  paddingBottom: unit(bottom)
                });
              }, "resize"),
              totalHeight: /* @__PURE__ */ __name(function totalHeight(index) {
                if (index === void 0) {
                  index = Splide2.length - 1;
                }
                var Slide = Elements.getSlide(index);
                if (Slide) {
                  return getRect(Slide.slide).bottom - getRect(Elements.list).top + this.gap;
                }
                return 0;
              }, "totalHeight"),
              slideWidth: /* @__PURE__ */ __name(function slideWidth() {
                return toPixel(root, options2.fixedWidth || this.width);
              }, "slideWidth"),
              slideHeight: /* @__PURE__ */ __name(function slideHeight(index) {
                if (options2.autoHeight) {
                  var Slide = Elements.getSlide(index);
                  return Slide ? Slide.slide.offsetHeight : 0;
                }
                var height = options2.fixedHeight || (this.height + this.gap) / options2.perPage - this.gap;
                return toPixel(root, height);
              }, "slideHeight"),
              get width() {
                return track2.clientWidth;
              },
              get height() {
                var height = options2.height || this.width * options2.heightRatio;
                exist(height, '"height" or "heightRatio" is missing.');
                return toPixel(root, height) - this.padding.top - this.padding.bottom;
              }
            };
          }, "vertical");
          ;
          function throttle(func, wait) {
            var timeout;
            return function() {
              if (!timeout) {
                timeout = setTimeout(function() {
                  func();
                  timeout = null;
                }, wait);
              }
            };
          }
          __name(throttle, "throttle");
          function createInterval(callback, interval, progress) {
            var _window = window, requestAnimationFrame = _window.requestAnimationFrame;
            var start, elapse, rate, _pause = true;
            var step = /* @__PURE__ */ __name(function step2(timestamp) {
              if (!_pause) {
                if (!start) {
                  start = timestamp;
                  if (rate && rate < 1) {
                    start -= rate * interval;
                  }
                }
                elapse = timestamp - start;
                rate = elapse / interval;
                if (elapse >= interval) {
                  start = 0;
                  rate = 1;
                  callback();
                }
                if (progress) {
                  progress(rate);
                }
                requestAnimationFrame(step2);
              }
            }, "step");
            return {
              pause: /* @__PURE__ */ __name(function pause() {
                _pause = true;
                start = 0;
              }, "pause"),
              play: /* @__PURE__ */ __name(function play(reset) {
                start = 0;
                if (reset) {
                  rate = 0;
                }
                if (_pause) {
                  _pause = false;
                  requestAnimationFrame(step);
                }
              }, "play")
            };
          }
          __name(createInterval, "createInterval");
          ;
          const layout = /* @__PURE__ */ __name(function(Splide2, Components) {
            var Elements = Components.Elements;
            var isVertical = Splide2.options.direction === TTB;
            var Layout = object_assign({
              mount: /* @__PURE__ */ __name(function mount() {
                bind();
                init();
                this.totalSize = isVertical ? this.totalHeight : this.totalWidth;
                this.slideSize = isVertical ? this.slideHeight : this.slideWidth;
              }, "mount"),
              destroy: /* @__PURE__ */ __name(function destroy() {
                removeAttribute([Elements.list, Elements.track], "style");
              }, "destroy"),
              get size() {
                return isVertical ? this.height : this.width;
              }
            }, isVertical ? vertical(Splide2, Components) : horizontal(Splide2, Components));
            function init() {
              Layout.init();
              applyStyle(Splide2.root, {
                maxWidth: unit(Splide2.options.width)
              });
              Elements.each(function(Slide) {
                Slide.slide.style[Layout.margin] = unit(Layout.gap);
              });
              resize();
            }
            __name(init, "init");
            function bind() {
              Splide2.on("resize load", throttle(function() {
                Splide2.emit("resize");
              }, Splide2.options.throttle), window).on("resize", resize).on("updated refresh", init);
            }
            __name(bind, "bind");
            function resize() {
              var options2 = Splide2.options;
              Layout.resize();
              applyStyle(Elements.track, {
                height: unit(Layout.height)
              });
              var slideHeight = options2.autoHeight ? null : unit(Layout.slideHeight());
              Elements.each(function(Slide) {
                applyStyle(Slide.container, {
                  height: slideHeight
                });
                applyStyle(Slide.slide, {
                  width: options2.autoWidth ? null : unit(Layout.slideWidth(Slide.index)),
                  height: Slide.container ? null : slideHeight
                });
              });
              Splide2.emit("resized");
            }
            __name(resize, "resize");
            return Layout;
          }, "layout");
          ;
          var drag_abs = Math.abs;
          var MIN_VELOCITY = 0.1;
          var FRICTION_REDUCER = 7;
          const drag = /* @__PURE__ */ __name(function(Splide2, Components) {
            var Track = Components.Track;
            var Controller = Components.Controller;
            var startCoord;
            var startInfo;
            var currentInfo;
            var isDragging;
            var isVertical = Splide2.options.direction === TTB;
            var axis = isVertical ? "y" : "x";
            var Drag = {
              disabled: false,
              mount: /* @__PURE__ */ __name(function mount() {
                var _this = this;
                var Elements = Components.Elements;
                var track2 = Elements.track;
                Splide2.on("touchstart mousedown", start, track2).on("touchmove mousemove", move, track2, {
                  passive: false
                }).on("touchend touchcancel mouseleave mouseup dragend", end, track2).on("mounted refresh", function() {
                  each(Elements.list.querySelectorAll("img, a"), function(elm) {
                    Splide2.off("dragstart", elm).on("dragstart", function(e) {
                      e.preventDefault();
                    }, elm, {
                      passive: false
                    });
                  });
                }).on("mounted updated", function() {
                  _this.disabled = !Splide2.options.drag;
                });
              }, "mount")
            };
            function start(e) {
              if (!Drag.disabled && !isDragging) {
                init(e);
              }
            }
            __name(start, "start");
            function init(e) {
              startCoord = Track.toCoord(Track.position);
              startInfo = analyze(e, {});
              currentInfo = startInfo;
            }
            __name(init, "init");
            function move(e) {
              if (startInfo) {
                currentInfo = analyze(e, startInfo);
                if (isDragging) {
                  if (e.cancelable) {
                    e.preventDefault();
                  }
                  if (!Splide2.is(FADE)) {
                    var position = startCoord[axis] + currentInfo.offset[axis];
                    Track.translate(resist(position));
                  }
                } else {
                  if (shouldMove(currentInfo)) {
                    Splide2.emit("drag", startInfo);
                    isDragging = true;
                    Track.cancel();
                    init(e);
                  }
                }
              }
            }
            __name(move, "move");
            function shouldMove(_ref) {
              var offset = _ref.offset;
              if (Splide2.State.is(MOVING) && Splide2.options.waitForTransition) {
                return false;
              }
              var angle = Math.atan(drag_abs(offset.y) / drag_abs(offset.x)) * 180 / Math.PI;
              if (isVertical) {
                angle = 90 - angle;
              }
              return angle < Splide2.options.dragAngleThreshold;
            }
            __name(shouldMove, "shouldMove");
            function resist(position) {
              if (Splide2.is(SLIDE)) {
                var sign = Track.sign;
                var _start = sign * Track.trim(Track.toPosition(0));
                var _end = sign * Track.trim(Track.toPosition(Controller.edgeIndex));
                position *= sign;
                if (position < _start) {
                  position = _start - FRICTION_REDUCER * Math.log(_start - position);
                } else if (position > _end) {
                  position = _end + FRICTION_REDUCER * Math.log(position - _end);
                }
                position *= sign;
              }
              return position;
            }
            __name(resist, "resist");
            function end() {
              startInfo = null;
              if (isDragging) {
                Splide2.emit("dragged", currentInfo);
                go(currentInfo);
                isDragging = false;
              }
            }
            __name(end, "end");
            function go(info) {
              var velocity = info.velocity[axis];
              var absV = drag_abs(velocity);
              if (absV > 0) {
                var options2 = Splide2.options;
                var index = Splide2.index;
                var sign = velocity < 0 ? -1 : 1;
                var destIndex = index;
                if (!Splide2.is(FADE)) {
                  var destination = Track.position;
                  if (absV > options2.flickVelocityThreshold && drag_abs(info.offset[axis]) < options2.swipeDistanceThreshold) {
                    destination += sign * Math.min(absV * options2.flickPower, Components.Layout.size * (options2.flickMaxPages || 1));
                  }
                  destIndex = Track.toIndex(destination);
                }
                if (destIndex === index && absV > MIN_VELOCITY) {
                  destIndex = index + sign * Track.sign;
                }
                if (Splide2.is(SLIDE)) {
                  destIndex = between(destIndex, 0, Controller.edgeIndex);
                }
                Controller.go(destIndex, options2.isNavigation);
              }
            }
            __name(go, "go");
            function analyze(e, startInfo2) {
              var timeStamp = e.timeStamp, touches = e.touches;
              var _ref2 = touches ? touches[0] : e, clientX = _ref2.clientX, clientY = _ref2.clientY;
              var _ref3 = startInfo2.to || {}, _ref3$x = _ref3.x, fromX = _ref3$x === void 0 ? clientX : _ref3$x, _ref3$y = _ref3.y, fromY = _ref3$y === void 0 ? clientY : _ref3$y;
              var startTime = startInfo2.time || 0;
              var offset = {
                x: clientX - fromX,
                y: clientY - fromY
              };
              var duration = timeStamp - startTime;
              var velocity = {
                x: offset.x / duration,
                y: offset.y / duration
              };
              return {
                to: {
                  x: clientX,
                  y: clientY
                },
                offset,
                time: timeStamp,
                velocity
              };
            }
            __name(analyze, "analyze");
            return Drag;
          }, "drag");
          ;
          const click = /* @__PURE__ */ __name(function(Splide2, Components) {
            var disabled = false;
            var Click = {
              required: Splide2.options.drag,
              mount: /* @__PURE__ */ __name(function mount() {
                Splide2.on("click", onClick, Components.Elements.track, {
                  capture: true
                }).on("drag", function() {
                  disabled = true;
                }).on("dragged", function() {
                  setTimeout(function() {
                    disabled = false;
                  });
                });
              }, "mount")
            };
            function onClick(e) {
              if (disabled) {
                e.preventDefault();
                e.stopPropagation();
                e.stopImmediatePropagation();
              }
            }
            __name(onClick, "onClick");
            return Click;
          }, "click");
          ;
          var PAUSE_FLAGS = {
            HOVER: 1,
            FOCUS: 2,
            MANUAL: 3
          };
          const autoplay = /* @__PURE__ */ __name(function(Splide2, Components, name) {
            var flags = [];
            var interval;
            var Elements = Components.Elements;
            var Autoplay = {
              required: Splide2.options.autoplay,
              mount: /* @__PURE__ */ __name(function mount() {
                var options2 = Splide2.options;
                if (Elements.slides.length > options2.perPage) {
                  interval = createInterval(function() {
                    Splide2.go(">");
                  }, options2.interval, function(rate) {
                    Splide2.emit(name + ":playing", rate);
                    if (Elements.bar) {
                      applyStyle(Elements.bar, {
                        width: rate * 100 + "%"
                      });
                    }
                  });
                  bind();
                  this.play();
                }
              }, "mount"),
              play: /* @__PURE__ */ __name(function play(flag) {
                if (flag === void 0) {
                  flag = 0;
                }
                flags = flags.filter(function(f) {
                  return f !== flag;
                });
                if (!flags.length) {
                  Splide2.emit(name + ":play");
                  interval.play(Splide2.options.resetProgress);
                }
              }, "play"),
              pause: /* @__PURE__ */ __name(function pause(flag) {
                if (flag === void 0) {
                  flag = 0;
                }
                interval.pause();
                if (flags.indexOf(flag) === -1) {
                  flags.push(flag);
                }
                if (flags.length === 1) {
                  Splide2.emit(name + ":pause");
                }
              }, "pause")
            };
            function bind() {
              var options2 = Splide2.options;
              var sibling = Splide2.sibling;
              var elms = [Splide2.root, sibling ? sibling.root : null];
              if (options2.pauseOnHover) {
                switchOn(elms, "mouseleave", PAUSE_FLAGS.HOVER, true);
                switchOn(elms, "mouseenter", PAUSE_FLAGS.HOVER, false);
              }
              if (options2.pauseOnFocus) {
                switchOn(elms, "focusout", PAUSE_FLAGS.FOCUS, true);
                switchOn(elms, "focusin", PAUSE_FLAGS.FOCUS, false);
              }
              if (Elements.play) {
                Splide2.on("click", function() {
                  Autoplay.play(PAUSE_FLAGS.FOCUS);
                  Autoplay.play(PAUSE_FLAGS.MANUAL);
                }, Elements.play);
              }
              if (Elements.pause) {
                switchOn([Elements.pause], "click", PAUSE_FLAGS.MANUAL, false);
              }
              Splide2.on("move refresh", function() {
                Autoplay.play();
              }).on("destroy", function() {
                Autoplay.pause();
              });
            }
            __name(bind, "bind");
            function switchOn(elms, event, flag, play) {
              elms.forEach(function(elm) {
                Splide2.on(event, function() {
                  Autoplay[play ? "play" : "pause"](flag);
                }, elm);
              });
            }
            __name(switchOn, "switchOn");
            return Autoplay;
          }, "autoplay");
          ;
          const cover = /* @__PURE__ */ __name(function(Splide2, Components) {
            var options2 = Splide2.options;
            var Cover = {
              required: options2.cover,
              mount: /* @__PURE__ */ __name(function mount() {
                Splide2.on("lazyload:loaded", function(img) {
                  cover2(img, false);
                });
                Splide2.on("mounted updated refresh", function() {
                  return apply(false);
                });
              }, "mount"),
              destroy: /* @__PURE__ */ __name(function destroy() {
                apply(true);
              }, "destroy")
            };
            function apply(uncover) {
              Components.Elements.each(function(Slide) {
                var img = child(Slide.slide, "IMG") || child(Slide.container, "IMG");
                if (img && img.src) {
                  cover2(img, uncover);
                }
              });
            }
            __name(apply, "apply");
            function cover2(img, uncover) {
              applyStyle(img.parentElement, {
                background: uncover ? "" : 'center/cover no-repeat url("' + img.src + '")'
              });
              applyStyle(img, {
                display: uncover ? "" : "none"
              });
            }
            __name(cover2, "cover");
            return Cover;
          }, "cover");
          ;
          var XML_NAME_SPACE = "http://www.w3.org/2000/svg";
          var PATH = "m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z";
          var SIZE = 40;
          ;
          const arrows = /* @__PURE__ */ __name(function(Splide2, Components, name) {
            var prev;
            var next;
            var classes = Splide2.classes;
            var root = Splide2.root;
            var created;
            var Elements = Components.Elements;
            var Arrows = {
              required: Splide2.options.arrows,
              mount: /* @__PURE__ */ __name(function mount() {
                prev = Elements.arrows.prev;
                next = Elements.arrows.next;
                if ((!prev || !next) && Splide2.options.arrows) {
                  prev = createArrow(true);
                  next = createArrow(false);
                  created = true;
                  appendArrows();
                }
                if (prev && next) {
                  bind();
                }
                this.arrows = {
                  prev,
                  next
                };
              }, "mount"),
              mounted: /* @__PURE__ */ __name(function mounted() {
                Splide2.emit(name + ":mounted", prev, next);
              }, "mounted"),
              destroy: /* @__PURE__ */ __name(function destroy() {
                removeAttribute([prev, next], "disabled");
                if (created) {
                  dom_remove(prev.parentElement);
                }
              }, "destroy")
            };
            function bind() {
              Splide2.on("click", function() {
                Splide2.go("<");
              }, prev).on("click", function() {
                Splide2.go(">");
              }, next).on("mounted move updated refresh", updateDisabled);
            }
            __name(bind, "bind");
            function updateDisabled() {
              var _Components$Controlle = Components.Controller, prevIndex = _Components$Controlle.prevIndex, nextIndex = _Components$Controlle.nextIndex;
              var isEnough = Splide2.length > Splide2.options.perPage || Splide2.is(LOOP);
              prev.disabled = prevIndex < 0 || !isEnough;
              next.disabled = nextIndex < 0 || !isEnough;
              Splide2.emit(name + ":updated", prev, next, prevIndex, nextIndex);
            }
            __name(updateDisabled, "updateDisabled");
            function appendArrows() {
              var wrapper = create("div", {
                class: classes.arrows
              });
              append(wrapper, prev);
              append(wrapper, next);
              var slider = Elements.slider;
              var parent = Splide2.options.arrows === "slider" && slider ? slider : root;
              before(wrapper, parent.firstElementChild);
            }
            __name(appendArrows, "appendArrows");
            function createArrow(prev2) {
              var arrow = '<button class="' + classes.arrow + " " + (prev2 ? classes.prev : classes.next) + '" type="button">' + ('<svg xmlns="' + XML_NAME_SPACE + '"	viewBox="0 0 ' + SIZE + " " + SIZE + '"	width="' + SIZE + '"	height="' + SIZE + '">') + ('<path d="' + (Splide2.options.arrowPath || PATH) + '" />');
              return domify(arrow);
            }
            __name(createArrow, "createArrow");
            return Arrows;
          }, "arrows");
          ;
          var ATTRIBUTES_UPDATE_EVENT = "move.page";
          var UPDATE_EVENT = "updated.page refresh.page";
          const pagination = /* @__PURE__ */ __name(function(Splide2, Components, name) {
            var data = {};
            var Elements = Components.Elements;
            var Pagination = {
              mount: /* @__PURE__ */ __name(function mount() {
                var pagination2 = Splide2.options.pagination;
                if (pagination2) {
                  data = createPagination();
                  var slider = Elements.slider;
                  var parent = pagination2 === "slider" && slider ? slider : Splide2.root;
                  append(parent, data.list);
                  Splide2.on(ATTRIBUTES_UPDATE_EVENT, updateAttributes);
                }
                Splide2.off(UPDATE_EVENT).on(UPDATE_EVENT, function() {
                  Pagination.destroy();
                  if (Splide2.options.pagination) {
                    Pagination.mount();
                    Pagination.mounted();
                  }
                });
              }, "mount"),
              mounted: /* @__PURE__ */ __name(function mounted() {
                if (Splide2.options.pagination) {
                  var index = Splide2.index;
                  Splide2.emit(name + ":mounted", data, this.getItem(index));
                  updateAttributes(index, -1);
                }
              }, "mounted"),
              destroy: /* @__PURE__ */ __name(function destroy() {
                dom_remove(data.list);
                if (data.items) {
                  data.items.forEach(function(item) {
                    Splide2.off("click", item.button);
                  });
                }
                Splide2.off(ATTRIBUTES_UPDATE_EVENT);
                data = {};
              }, "destroy"),
              getItem: /* @__PURE__ */ __name(function getItem(index) {
                return data.items[Components.Controller.toPage(index)];
              }, "getItem"),
              get data() {
                return data;
              }
            };
            function updateAttributes(index, prevIndex) {
              var prev = Pagination.getItem(prevIndex);
              var curr = Pagination.getItem(index);
              var active = STATUS_CLASSES.active;
              if (prev) {
                removeClass(prev.button, active);
              }
              if (curr) {
                addClass(curr.button, active);
              }
              Splide2.emit(name + ":updated", data, prev, curr);
            }
            __name(updateAttributes, "updateAttributes");
            function createPagination() {
              var options2 = Splide2.options;
              var classes = Splide2.classes;
              var list = create("ul", {
                class: classes.pagination
              });
              var items = Elements.getSlides(false).filter(function(Slide) {
                return options2.focus !== false || Slide.index % options2.perPage === 0;
              }).map(function(Slide, page) {
                var li = create("li", {});
                var button = create("button", {
                  class: classes.page,
                  type: "button"
                });
                append(li, button);
                append(list, li);
                Splide2.on("click", function() {
                  Splide2.go(">" + page);
                }, button);
                return {
                  li,
                  button,
                  page,
                  Slides: Elements.getSlidesByPage(page)
                };
              });
              return {
                list,
                items
              };
            }
            __name(createPagination, "createPagination");
            return Pagination;
          }, "pagination");
          ;
          var SRC_DATA_NAME = "data-splide-lazy";
          var SRCSET_DATA_NAME = "data-splide-lazy-srcset";
          const lazyload = /* @__PURE__ */ __name(function(Splide2, Components, name) {
            var nextIndex;
            var images;
            var options2 = Splide2.options;
            var isSequential = options2.lazyLoad === "sequential";
            var Lazyload = {
              required: options2.lazyLoad,
              mount: /* @__PURE__ */ __name(function mount() {
                Splide2.on("mounted refresh", function() {
                  init();
                  Components.Elements.each(function(Slide) {
                    each(Slide.slide.querySelectorAll("[" + SRC_DATA_NAME + "], [" + SRCSET_DATA_NAME + "]"), function(img) {
                      if (!img.src && !img.srcset) {
                        images.push({
                          img,
                          Slide
                        });
                        applyStyle(img, {
                          display: "none"
                        });
                      }
                    });
                  });
                  if (isSequential) {
                    loadNext();
                  }
                });
                if (!isSequential) {
                  Splide2.on("mounted refresh moved." + name, check);
                }
              }, "mount"),
              destroy: init
            };
            function init() {
              images = [];
              nextIndex = 0;
            }
            __name(init, "init");
            function check(index) {
              index = isNaN(index) ? Splide2.index : index;
              images = images.filter(function(image) {
                if (image.Slide.isWithin(index, options2.perPage * (options2.preloadPages + 1))) {
                  load(image.img, image.Slide);
                  return false;
                }
                return true;
              });
              if (!images[0]) {
                Splide2.off("moved." + name);
              }
            }
            __name(check, "check");
            function load(img, Slide) {
              addClass(Slide.slide, STATUS_CLASSES.loading);
              var spinner = create("span", {
                class: Splide2.classes.spinner
              });
              append(img.parentElement, spinner);
              img.onload = function() {
                loaded2(img, spinner, Slide, false);
              };
              img.onerror = function() {
                loaded2(img, spinner, Slide, true);
              };
              setAttribute(img, "srcset", getAttribute(img, SRCSET_DATA_NAME) || "");
              setAttribute(img, "src", getAttribute(img, SRC_DATA_NAME) || "");
            }
            __name(load, "load");
            function loadNext() {
              if (nextIndex < images.length) {
                var image = images[nextIndex];
                load(image.img, image.Slide);
              }
              nextIndex++;
            }
            __name(loadNext, "loadNext");
            function loaded2(img, spinner, Slide, error2) {
              removeClass(Slide.slide, STATUS_CLASSES.loading);
              if (!error2) {
                dom_remove(spinner);
                applyStyle(img, {
                  display: ""
                });
                Splide2.emit(name + ":loaded", img).emit("resize");
              }
              if (isSequential) {
                loadNext();
              }
            }
            __name(loaded2, "loaded");
            return Lazyload;
          }, "lazyload");
          ;
          var ARIA_CURRENRT = "aria-current";
          var ARIA_CONTROLS = "aria-controls";
          var ARIA_LABEL = "aria-label";
          var ARIA_LABELLEDBY = "aria-labelledby";
          var ARIA_HIDDEN = "aria-hidden";
          var TAB_INDEX = "tabindex";
          ;
          var KEY_MAP = {
            ltr: {
              ArrowLeft: "<",
              ArrowRight: ">",
              Left: "<",
              Right: ">"
            },
            rtl: {
              ArrowLeft: ">",
              ArrowRight: "<",
              Left: ">",
              Right: "<"
            },
            ttb: {
              ArrowUp: "<",
              ArrowDown: ">",
              Up: "<",
              Down: ">"
            }
          };
          const keyboard = /* @__PURE__ */ __name(function(Splide2) {
            var target;
            return {
              mount: /* @__PURE__ */ __name(function mount() {
                Splide2.on("mounted updated", function() {
                  var options2 = Splide2.options;
                  var root = Splide2.root;
                  var map = KEY_MAP[options2.direction];
                  var keyboard2 = options2.keyboard;
                  if (target) {
                    Splide2.off("keydown", target);
                    removeAttribute(root, TAB_INDEX);
                  }
                  if (keyboard2) {
                    if (keyboard2 === "focused") {
                      target = root;
                      setAttribute(root, TAB_INDEX, 0);
                    } else {
                      target = document;
                    }
                    Splide2.on("keydown", function(e) {
                      if (map[e.key]) {
                        Splide2.go(map[e.key]);
                      }
                    }, target);
                  }
                });
              }, "mount")
            };
          }, "keyboard");
          ;
          const a11y = /* @__PURE__ */ __name(function(Splide2, Components) {
            var i18n = Splide2.i18n;
            var Elements = Components.Elements;
            var allAttributes = [ARIA_HIDDEN, TAB_INDEX, ARIA_CONTROLS, ARIA_LABEL, ARIA_CURRENRT, "role"];
            var A11y = {
              required: Splide2.options.accessibility,
              mount: /* @__PURE__ */ __name(function mount() {
                Splide2.on("visible", function(Slide) {
                  updateSlide(Slide.slide, true);
                }).on("hidden", function(Slide) {
                  updateSlide(Slide.slide, false);
                }).on("arrows:mounted", initArrows).on("arrows:updated", updateArrows).on("pagination:mounted", initPagination).on("pagination:updated", updatePagination).on("refresh", function() {
                  removeAttribute(Components.Clones.clones, allAttributes);
                });
                if (Splide2.options.isNavigation) {
                  Splide2.on("navigation:mounted navigation:updated", initNavigation).on("active", function(Slide) {
                    updateNavigation(Slide, true);
                  }).on("inactive", function(Slide) {
                    updateNavigation(Slide, false);
                  });
                }
                initAutoplay();
              }, "mount"),
              destroy: /* @__PURE__ */ __name(function destroy() {
                var Arrows = Components.Arrows;
                var arrows2 = Arrows ? Arrows.arrows : {};
                removeAttribute(Elements.slides.concat([arrows2.prev, arrows2.next, Elements.play, Elements.pause]), allAttributes);
              }, "destroy")
            };
            function updateSlide(slide2, visible) {
              setAttribute(slide2, ARIA_HIDDEN, !visible);
              if (Splide2.options.slideFocus) {
                setAttribute(slide2, TAB_INDEX, visible ? 0 : -1);
              }
            }
            __name(updateSlide, "updateSlide");
            function initArrows(prev, next) {
              var controls = Elements.track.id;
              setAttribute(prev, ARIA_CONTROLS, controls);
              setAttribute(next, ARIA_CONTROLS, controls);
            }
            __name(initArrows, "initArrows");
            function updateArrows(prev, next, prevIndex, nextIndex) {
              var index = Splide2.index;
              var prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;
              var nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;
              setAttribute(prev, ARIA_LABEL, prevLabel);
              setAttribute(next, ARIA_LABEL, nextLabel);
            }
            __name(updateArrows, "updateArrows");
            function initPagination(data, activeItem) {
              if (activeItem) {
                setAttribute(activeItem.button, ARIA_CURRENRT, true);
              }
              data.items.forEach(function(item) {
                var options2 = Splide2.options;
                var text = options2.focus === false && options2.perPage > 1 ? i18n.pageX : i18n.slideX;
                var label = sprintf(text, item.page + 1);
                var button = item.button;
                var controls = item.Slides.map(function(Slide) {
                  return Slide.slide.id;
                });
                setAttribute(button, ARIA_CONTROLS, controls.join(" "));
                setAttribute(button, ARIA_LABEL, label);
              });
            }
            __name(initPagination, "initPagination");
            function updatePagination(data, prev, curr) {
              if (prev) {
                removeAttribute(prev.button, ARIA_CURRENRT);
              }
              if (curr) {
                setAttribute(curr.button, ARIA_CURRENRT, true);
              }
            }
            __name(updatePagination, "updatePagination");
            function initAutoplay() {
              ["play", "pause"].forEach(function(name) {
                var elm = Elements[name];
                if (elm) {
                  if (!isButton(elm)) {
                    setAttribute(elm, "role", "button");
                  }
                  setAttribute(elm, ARIA_CONTROLS, Elements.track.id);
                  setAttribute(elm, ARIA_LABEL, i18n[name]);
                }
              });
            }
            __name(initAutoplay, "initAutoplay");
            function initNavigation(main) {
              Elements.each(function(Slide) {
                var slide2 = Slide.slide;
                var realIndex = Slide.realIndex;
                if (!isButton(slide2)) {
                  setAttribute(slide2, "role", "button");
                }
                var slideIndex = realIndex > -1 ? realIndex : Slide.index;
                var label = sprintf(i18n.slideX, slideIndex + 1);
                var mainSlide = main.Components.Elements.getSlide(slideIndex);
                setAttribute(slide2, ARIA_LABEL, label);
                if (mainSlide) {
                  setAttribute(slide2, ARIA_CONTROLS, mainSlide.slide.id);
                }
              });
            }
            __name(initNavigation, "initNavigation");
            function updateNavigation(_ref, active) {
              var slide2 = _ref.slide;
              if (active) {
                setAttribute(slide2, ARIA_CURRENRT, true);
              } else {
                removeAttribute(slide2, ARIA_CURRENRT);
              }
            }
            __name(updateNavigation, "updateNavigation");
            function isButton(elm) {
              return elm.tagName === "BUTTON";
            }
            __name(isButton, "isButton");
            return A11y;
          }, "a11y");
          ;
          var SYNC_EVENT = "move.sync";
          var CLICK_EVENTS = "mouseup touchend";
          var TRIGGER_KEYS = [" ", "Enter", "Spacebar"];
          const sync = /* @__PURE__ */ __name(function(Splide2) {
            var sibling = Splide2.sibling;
            var isNavigation = sibling && sibling.options.isNavigation;
            var Sync = {
              required: !!sibling,
              mount: /* @__PURE__ */ __name(function mount() {
                syncMain();
                syncSibling();
                if (isNavigation) {
                  bind();
                  Splide2.on("refresh", function() {
                    setTimeout(function() {
                      bind();
                      sibling.emit("navigation:updated", Splide2);
                    });
                  });
                }
              }, "mount"),
              mounted: /* @__PURE__ */ __name(function mounted() {
                if (isNavigation) {
                  sibling.emit("navigation:mounted", Splide2);
                }
              }, "mounted")
            };
            function syncMain() {
              Splide2.on(SYNC_EVENT, function(newIndex, prevIndex, destIndex) {
                sibling.off(SYNC_EVENT).go(sibling.is(LOOP) ? destIndex : newIndex, false);
                syncSibling();
              });
            }
            __name(syncMain, "syncMain");
            function syncSibling() {
              sibling.on(SYNC_EVENT, function(newIndex, prevIndex, destIndex) {
                Splide2.off(SYNC_EVENT).go(Splide2.is(LOOP) ? destIndex : newIndex, false);
                syncMain();
              });
            }
            __name(syncSibling, "syncSibling");
            function bind() {
              sibling.Components.Elements.each(function(_ref) {
                var slide2 = _ref.slide, index = _ref.index;
                Splide2.off(CLICK_EVENTS, slide2).on(CLICK_EVENTS, function(e) {
                  if (!e.button || e.button === 0) {
                    moveSibling(index);
                  }
                }, slide2);
                Splide2.off("keyup", slide2).on("keyup", function(e) {
                  if (TRIGGER_KEYS.indexOf(e.key) > -1) {
                    e.preventDefault();
                    moveSibling(index);
                  }
                }, slide2, {
                  passive: false
                });
              });
            }
            __name(bind, "bind");
            function moveSibling(index) {
              if (Splide2.State.is(IDLE)) {
                sibling.go(index);
              }
            }
            __name(moveSibling, "moveSibling");
            return Sync;
          }, "sync");
          ;
          var THROTTLE = 50;
          const breakpoints = /* @__PURE__ */ __name(function(Splide2) {
            var breakpoints2 = Splide2.options.breakpoints;
            var throttledCheck = throttle(check, THROTTLE);
            var initialOptions;
            var map = [];
            var prevPoint;
            var Breakpoints = {
              required: breakpoints2 && matchMedia,
              mount: /* @__PURE__ */ __name(function mount() {
                map = Object.keys(breakpoints2).sort(function(n, m) {
                  return +n - +m;
                }).map(function(point) {
                  return {
                    point,
                    mql: matchMedia("(max-width:" + point + "px)")
                  };
                });
                this.destroy(true);
                addEventListener("resize", throttledCheck);
                initialOptions = Splide2.options;
                check();
              }, "mount"),
              destroy: /* @__PURE__ */ __name(function destroy(completely) {
                if (completely) {
                  removeEventListener("resize", throttledCheck);
                }
              }, "destroy")
            };
            function check() {
              var point = getPoint();
              if (point !== prevPoint) {
                prevPoint = point;
                var State = Splide2.State;
                var options2 = breakpoints2[point] || initialOptions;
                var destroy = options2.destroy;
                if (destroy) {
                  Splide2.options = initialOptions;
                  Splide2.destroy(destroy === "completely");
                } else {
                  if (State.is(DESTROYED)) {
                    Splide2.mount();
                  }
                  Splide2.options = options2;
                }
              }
            }
            __name(check, "check");
            function getPoint() {
              var item = map.filter(function(item2) {
                return item2.mql.matches;
              })[0];
              return item ? item.point : -1;
            }
            __name(getPoint, "getPoint");
            return Breakpoints;
          }, "breakpoints");
          ;
          var COMPLETE = {
            Options: options,
            Breakpoints: breakpoints,
            Controller: controller,
            Elements: components_elements,
            Track: track,
            Clones: clones,
            Layout: layout,
            Drag: drag,
            Click: click,
            Autoplay: autoplay,
            Cover: cover,
            Arrows: arrows,
            Pagination: pagination,
            LazyLoad: lazyload,
            Keyboard: keyboard,
            Sync: sync,
            A11y: a11y
          };
          var LIGHT = {
            Options: options,
            Controller: controller,
            Elements: components_elements,
            Track: track,
            Clones: clones,
            Layout: layout,
            Drag: drag,
            Click: click,
            Arrows: arrows,
            Pagination: pagination,
            A11y: a11y
          };
          ;
          function _inheritsLoose(subClass, superClass) {
            subClass.prototype = Object.create(superClass.prototype);
            subClass.prototype.constructor = subClass;
            subClass.__proto__ = superClass;
          }
          __name(_inheritsLoose, "_inheritsLoose");
          var module_Splide = function(_Core) {
            _inheritsLoose(Splide2, _Core);
            function Splide2(root, options2) {
              return _Core.call(this, root, options2, COMPLETE) || this;
            }
            __name(Splide2, "Splide");
            return Splide2;
          }(Splide);
        }
      };
      var __webpack_module_cache__ = {};
      function __webpack_require__(moduleId) {
        if (__webpack_module_cache__[moduleId]) {
          return __webpack_module_cache__[moduleId].exports;
        }
        var module2 = __webpack_module_cache__[moduleId] = {
          exports: {}
        };
        __webpack_modules__[moduleId](module2, module2.exports, __webpack_require__);
        return module2.exports;
      }
      __name(__webpack_require__, "__webpack_require__");
      (() => {
        __webpack_require__.d = (exports2, definition) => {
          for (var key in definition) {
            if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key)) {
              Object.defineProperty(exports2, key, {enumerable: true, get: definition[key]});
            }
          }
        };
      })();
      (() => {
        __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
      })();
      (() => {
        __webpack_require__.r = (exports2) => {
          if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
            Object.defineProperty(exports2, Symbol.toStringTag, {value: "Module"});
          }
          Object.defineProperty(exports2, "__esModule", {value: true});
        };
      })();
      return __webpack_require__(311);
    })();
  });
});

// dep:@splidejs_splide
var splidejs_splide_default = require_splide_esm();
export {
  splidejs_splide_default as default
};
//# sourceMappingURL=@splidejs_splide.js.map
