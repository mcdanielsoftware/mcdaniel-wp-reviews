{
  "version": 3,
  "sources": ["../@googlemaps/js-api-loader/node_modules/fast-deep-equal/index.js", "../@googlemaps/js-api-loader/src/index.ts"],
  "sourcesContent": ["'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n", "/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at.\n *\n *      Http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport isEqual from \"fast-deep-equal\";\n\n/**\n * @ignore\n */\ndeclare global {\n  interface Window {\n    __googleMapsCallback: (e: Event) => void;\n  }\n}\n\nexport const DEFAULT_ID = \"__googleMapsScriptId\";\n\ntype Libraries = (\n  | \"drawing\"\n  | \"geometry\"\n  | \"localContext\"\n  | \"places\"\n  | \"visualization\"\n)[];\n\n/**\n * The Google Maps JavaScript API\n * [documentation](https://developers.google.com/maps/documentation/javascript/tutorial)\n * is the authoritative source for [[LoaderOptions]].\n/**\n * Loader options\n */\nexport interface LoaderOptions {\n  /**\n   * See https://developers.google.com/maps/documentation/javascript/get-api-key.\n   */\n  apiKey: string;\n  /**\n   * @deprecated See https://developers.google.com/maps/premium/overview.\n   */\n  channel?: string;\n  /**\n   * @deprecated See https://developers.google.com/maps/premium/overview, use `apiKey` instead.\n   */\n  client?: string;\n  /**\n   * In your application you can specify release channels or version numbers:\n   *\n   * The weekly version is specified with `version=weekly`. This version is\n   * updated once per week, and is the most current.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'weekly'});\n   * ```\n   *\n   * The quarterly version is specified with `version=quarterly`. This version\n   * is updated once per quarter, and is the most predictable.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'quarterly'});\n   * ```\n   *\n   * The version number is specified with `version=n.nn`. You can choose\n   * `version=3.40`, `version=3.39`, or `version=3.38`. Version numbers are\n   * updated once per quarter.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: '3.40'});\n   * ```\n   *\n   * If you do not explicitly specify a version, you will receive the\n   * weekly version by default.\n   */\n  version?: string;\n  /**\n   * The id of the script tag. Before adding a new script, the Loader will check for an existing one.\n   */\n  id?: string;\n  /**\n   * When loading the Maps JavaScript API via the URL you may optionally load\n   * additional libraries through use of the libraries URL parameter. Libraries\n   * are modules of code that provide additional functionality to the main Maps\n   * JavaScript API but are not loaded unless you specifically request them.\n   *\n   * ```\n   * const loader = Loader({\n   *  apiKey,\n   *  libraries: ['drawing', 'geometry', 'places', 'visualization'],\n   * });\n   * ```\n   *\n   * Set the [list of libraries](https://developers.google.com/maps/documentation/javascript/libraries) for more options.\n   */\n  libraries?: Libraries;\n  /**\n   * By default, the Maps JavaScript API uses the user's preferred language\n   * setting as specified in the browser, when displaying textual information\n   * such as the names for controls, copyright notices, driving directions and\n   * labels on maps. In most cases, it's preferable to respect the browser\n   * setting. However, if you want the Maps JavaScript API to ignore the\n   * browser's language setting, you can force it to display information in a\n   * particular language when loading the Maps JavaScript API code.\n   *\n   * For example, the following example localizes the language to Japan:\n   *\n   * ```\n   * const loader = Loader({apiKey, language: 'ja', region: 'JP'});\n   * ```\n   *\n   * See the [list of supported\n   * languages](https://developers.google.com/maps/faq#languagesupport). Note\n   * that new languages are added often, so this list may not be exhaustive.\n   *\n   */\n  language?: string;\n  /**\n   * When you load the Maps JavaScript API from maps.googleapis.com it applies a\n   * default bias for application behavior towards the United States. If you\n   * want to alter your application to serve different map tiles or bias the\n   * application (such as biasing geocoding results towards the region), you can\n   * override this default behavior by adding a region parameter when loading\n   * the Maps JavaScript API code.\n   *\n   * The region parameter accepts Unicode region subtag identifiers which\n   * (generally) have a one-to-one mapping to country code Top-Level Domains\n   * (ccTLDs). Most Unicode region identifiers are identical to ISO 3166-1\n   * codes, with some notable exceptions. For example, Great Britain's ccTLD is\n   * \"uk\" (corresponding to the domain .co.uk) while its region identifier is\n   * \"GB.\"\n   *\n   * For example, the following example localizes the map to the United Kingdom:\n   *\n   * ```\n   * const loader = Loader({apiKey, region: 'GB'});\n   * ```\n   */\n  region?: string;\n  /**\n   * (Beta) You can add multiple Map IDs to your map using the map_ids paramenter in\n   * your bootstrap request.\n   */\n  mapIds?: string[];\n  /**\n   * Use a custom url and path to load the Google Maps API script.\n   */\n  url?: string;\n  /**\n   * Use a cryptographic nonce attribute.\n   */\n  nonce?: string;\n  /**\n   * The number of script load retries.\n   */\n  retries?: number;\n}\n\n/**\n * [[Loader]] makes it easier to add Google Maps JavaScript API to your application\n * dynamically using\n * [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n * It works by dynamically creating and appending a script node to the the\n * document head and wrapping the callback function so as to return a promise.\n *\n * ```\n * const loader = new Loader({\n *   apiKey: \"\",\n *   version: \"weekly\",\n *   libraries: [\"places\"]\n * });\n *\n * loader.load().then(() => {\n *   const map = new google.maps.Map(...)\n * })\n * ```\n */\nexport class Loader {\n  /**\n   * See [[LoaderOptions.version]]\n   */\n  version: string;\n  /**\n   * See [[LoaderOptions.apiKey]]\n   */\n  apiKey: string;\n  /**\n   * See [[LoaderOptions.channel]]\n   */\n  channel: string;\n  /**\n   * See [[LoaderOptions.client]]\n   */\n  client: string;\n  /**\n   * See [[LoaderOptions.id]]\n   */\n  id: string;\n  /**\n   * See [[LoaderOptions.libraries]]\n   */\n  libraries: Libraries;\n  /**\n   * See [[LoaderOptions.language]]\n   */\n  language: string;\n\n  /**\n   * See [[LoaderOptions.region]]\n   */\n  region: string;\n\n  /**\n   * See [[LoaderOptions.mapIds]]\n   */\n  mapIds: string[];\n\n  /**\n   * See [[LoaderOptions.nonce]]\n   */\n  nonce: string | null;\n\n  /**\n   * See [[LoaderOptions.retries]]\n   */\n  retries: number;\n\n  /**\n   * See [[LoaderOptions.url]]\n   */\n  url: string;\n\n  private CALLBACK = \"__googleMapsCallback\";\n  private callbacks: ((e: Event) => void)[] = [];\n  private done = false;\n  private loading = false;\n  private onerrorEvent: Event;\n  private static instance: Loader;\n  private errors: ErrorEvent[] = [];\n\n  /**\n   * Creates an instance of Loader using [[LoaderOptions]]. No defaults are set\n   * using this library, instead the defaults are set by the Google Maps\n   * JavaScript API server.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'weekly', libraries: ['places']});\n   * ```\n   */\n  constructor({\n    apiKey,\n    channel,\n    client,\n    id = DEFAULT_ID,\n    libraries = [],\n    language,\n    region,\n    version,\n    mapIds,\n    nonce,\n    retries = 3,\n    url = \"https://maps.googleapis.com/maps/api/js\",\n  }: LoaderOptions) {\n    this.version = version;\n    this.apiKey = apiKey;\n    this.channel = channel;\n    this.client = client;\n    this.id = id || DEFAULT_ID; // Do not allow empty string\n    this.libraries = libraries;\n    this.language = language;\n    this.region = region;\n    this.mapIds = mapIds;\n    this.nonce = nonce;\n    this.retries = retries;\n    this.url = url;\n\n    if (Loader.instance) {\n      if (!isEqual(this.options, Loader.instance.options)) {\n        throw new Error(\n          `Loader must not be called again with different options. ${JSON.stringify(\n            this.options\n          )} !== ${JSON.stringify(Loader.instance.options)}`\n        );\n      }\n\n      return Loader.instance;\n    }\n\n    Loader.instance = this;\n  }\n\n  get options(): LoaderOptions {\n    return {\n      version: this.version,\n      apiKey: this.apiKey,\n      channel: this.channel,\n      client: this.client,\n      id: this.id,\n      libraries: this.libraries,\n      language: this.language,\n      region: this.region,\n      mapIds: this.mapIds,\n      nonce: this.nonce,\n      url: this.url,\n    };\n  }\n\n  /**\n   * CreateUrl returns the Google Maps JavaScript API script url given the [[LoaderOptions]].\n   *\n   * @ignore\n   */\n  createUrl(): string {\n    let url = this.url;\n\n    url += `?callback=${this.CALLBACK}`;\n\n    if (this.apiKey) {\n      url += `&key=${this.apiKey}`;\n    }\n\n    if (this.channel) {\n      url += `&channel=${this.channel}`;\n    }\n\n    if (this.client) {\n      url += `&client=${this.client}`;\n    }\n\n    if (this.libraries.length > 0) {\n      url += `&libraries=${this.libraries.join(\",\")}`;\n    }\n\n    if (this.language) {\n      url += `&language=${this.language}`;\n    }\n\n    if (this.region) {\n      url += `&region=${this.region}`;\n    }\n\n    if (this.version) {\n      url += `&v=${this.version}`;\n    }\n\n    if (this.mapIds) {\n      url += `&map_ids=${this.mapIds.join(\",\")}`;\n    }\n\n    return url;\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script and return a Promise.\n   */\n  load(): Promise<void> {\n    return this.loadPromise();\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script and return a Promise.\n   *\n   * @ignore\n   */\n  loadPromise(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.loadCallback((err: Event) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script with a callback.\n   */\n  loadCallback(fn: (e: Event) => void): void {\n    this.callbacks.push(fn);\n    this.execute();\n  }\n\n  /**\n   * Set the script on document.\n   */\n  private setScript(): void {\n    if (document.getElementById(this.id)) {\n      // TODO wrap onerror callback for cases where the script was loaded elsewhere\n      this.callback();\n      return;\n    }\n\n    const url = this.createUrl();\n    const script = document.createElement(\"script\");\n    script.id = this.id;\n    script.type = \"text/javascript\";\n    script.src = url;\n    script.onerror = this.loadErrorCallback.bind(this);\n    script.defer = true;\n    script.async = true;\n\n    if (this.nonce) {\n      script.nonce = this.nonce;\n    }\n\n    document.head.appendChild(script);\n  }\n\n  deleteScript(): void {\n    const script = document.getElementById(this.id);\n    if (script) {\n      script.remove();\n    }\n  }\n\n  private resetIfRetryingFailed(): void {\n    const possibleAttempts = this.retries + 1;\n    if (this.done && !this.loading && this.errors.length >= possibleAttempts) {\n      this.deleteScript();\n      this.done = false;\n      this.loading = false;\n      this.errors = [];\n    }\n  }\n\n  private loadErrorCallback(e: ErrorEvent): void {\n    this.errors.push(e);\n\n    if (this.errors.length <= this.retries) {\n      const delay = this.errors.length * 2 ** this.errors.length;\n\n      console.log(\n        `Failed to load Google Maps script, retrying in ${delay} ms.`\n      );\n\n      setTimeout(() => {\n        this.deleteScript();\n        this.setScript();\n      }, delay);\n    } else {\n      this.onerrorEvent = e;\n      this.callback();\n    }\n  }\n\n  private setCallback(): void {\n    window.__googleMapsCallback = this.callback.bind(this);\n  }\n\n  private callback(): void {\n    this.done = true;\n    this.loading = false;\n\n    this.callbacks.forEach((cb) => {\n      cb(this.onerrorEvent);\n    });\n\n    this.callbacks = [];\n  }\n\n  private execute(): void {\n    if (window.google && window.google.maps && window.google.maps.version) {\n      console.warn(\n        \"Google Maps already loaded outside @googlemaps/js-api-loader.\" +\n          \"This may result in undesirable behavior as options and script parameters may not match.\"\n      );\n      this.callback();\n    }\n\n    this.resetIfRetryingFailed();\n    if (this.done) {\n      this.callback();\n    } else {\n      if (this.loading) {\n        // do nothing but wait\n      } else {\n        this.loading = true;\n        this.setCallback();\n        this.setScript();\n      }\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
